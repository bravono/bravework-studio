generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model challenges {
  challenge_Id Int         @id @default(autoincrement())
  project_Id   Int
  title        String      @db.VarChar(255)
  projects     projects    @relation(fields: [project_Id], references: [project_Id], onDelete: NoAction, map: "fk_challenges_projects1")
  solutions    solutions[]

  @@index([project_Id], map: "fk_challenges_projects1_idx")
}

model course_enrollment {
  course_Id Int
  user_Id   Int
  courses   courses @relation(fields: [course_Id], references: [course_Id], onDelete: NoAction, map: "fk_course_enrollment_courses1")
  users     users   @relation(fields: [user_Id], references: [user_Id], onDelete: NoAction, map: "fk_course_enrollment_users1")

  @@id([course_Id, user_Id])
  @@index([user_Id], map: "fk_courseEnrollment_users1_idx")
}

model courses {
  course_Id         Int                 @id @default(autoincrement())
  user_Id           Int
  title             String              @db.VarChar(255)
  published         Int                 @db.TinyInt
  date              DateTime            @db.DateTime(0)
  description       String              @db.VarChar(255)
  price             Decimal             @db.Decimal(5, 2)
  duration          String              @db.VarChar(45)
  course_enrollment course_enrollment[]
  users             users               @relation(fields: [user_Id], references: [user_Id], onDelete: NoAction, map: "fk_roles_users1000")

  @@index([user_Id], map: "fk_roles_users1_idx")
}

model customer_details {
  customer_detail_Id Int     @default(autoincrement())
  user_Id            Int
  industry           String? @db.VarChar(45)
  job_title          String? @db.VarChar(45)
  phone              String  @db.VarChar(45)
  address            String  @db.VarChar(255)
  company_name       String? @db.VarChar(45)
  users              users   @relation(fields: [user_Id], references: [user_Id], onDelete: NoAction, map: "fk_customerDetails_users1")

  @@id([customer_detail_Id, user_Id])
  @@index([user_Id], map: "fk_customerDetails_users1_idx")
}

model invoices {
  invoice_Id   Int      @id @default(autoincrement())
  order_Id     Int
  total_amount Decimal  @db.Decimal(5, 2)
  date         DateTime @db.DateTime(0)
  dueDate      DateTime @db.DateTime(0)
  status       String   @db.VarChar(45)
  orders       orders   @relation(fields: [order_Id], references: [orders_Id], onDelete: NoAction, map: "fk_invoices_orders1")

  @@index([order_Id], map: "fk_invoices_orders1_idx")
}

model order_coupons {
  order_Id  Int
  coupon_Id Int
  coupon    coupons @relation(fields: [coupon_Id], references: [coupon_Id], onDelete: NoAction, map: "fk_orderCoupons_coupon1")
  orders    orders  @relation(fields: [order_Id], references: [orders_Id], onDelete: NoAction, map: "fk_orderCoupons_orders1")

  @@id([order_Id, coupon_Id])
  @@index([coupon_Id], map: "fk_orderCoupons_coupon1_idx")
  @@index([order_Id], map: "fk_orderCoupons_orders1_idx")
}

model order_files {
  order_file_Id     Int                 @id @default(autoincrement())
  file_name         String              @db.VarChar(255)
  file_type         String              @db.VarChar(45)
  file_size         String?             @db.VarChar(45)
  file_url          String              @db.VarChar(255)
  order_order_files order_order_files[]
}

model order_order_files {
  order_Id      Int
  order_file_Id Int
  orders        orders      @relation(fields: [order_Id], references: [orders_Id], onDelete: NoAction, map: "fk_orderCoupons_orders10")
  order_files   order_files @relation(fields: [order_file_Id], references: [order_file_Id], onDelete: NoAction, map: "fk_orderOrderFiles_orderFiles1")

  @@id([order_Id, order_file_Id])
  @@index([order_Id], map: "fk_orderCoupons_orders1_idx")
  @@index([order_file_Id], map: "fk_orderOrderFiles_orderFiles1_idx")
}

model orders {
  orders_Id         Int                 @id @default(autoincrement())
  user_Id           Int
  orderDate         DateTime            @db.DateTime(0)
  totalCost         String?             @db.VarChar(45)
  status            String?             @db.VarChar(45)
  invoices          invoices[]
  order_coupons     order_coupons[]
  order_order_files order_order_files[]
  users             users               @relation(fields: [user_Id], references: [user_Id], onDelete: NoAction, map: "fk_roles_users10")
  product_orders    product_orders[]

  @@index([user_Id], map: "fk_roles_users1_idx")
}

model product_orders {
  order_Id   Int
  product_Id Int
  orders     orders   @relation(fields: [order_Id], references: [orders_Id], onDelete: NoAction, map: "fk_orderCoupons_orders100")
  products   products @relation(fields: [product_Id], references: [product_Id], onDelete: NoAction, map: "fk_productOrders_products1")

  @@id([order_Id, product_Id])
  @@index([order_Id], map: "fk_orderCoupons_orders1_idx")
  @@index([product_Id], map: "fk_productOrders_products1_idx")
}

model products {
  product_Id       Int                @id @default(autoincrement())
  category_Id      Int
  name             String             @unique(map: "name_UNIQUE") @db.VarChar(45)
  description      String             @db.VarChar(255)
  price            Decimal            @db.Decimal(5, 2)
  product_orders   product_orders[]
  product_category product_categories @relation(fields: [category_Id], references: [category_Id], onDelete: NoAction, map: "fk_products_category1")

  @@index([category_Id], map: "fk_products_category1_idx")
}

model project_owner {
  userId    Int
  projectId Int
  projects  projects @relation(fields: [projectId], references: [project_Id], onDelete: NoAction, map: "fk_project_owner_projects1")
  users     users    @relation(fields: [userId], references: [user_Id], onDelete: NoAction, map: "fk_project_owner_users1")

  @@id([userId, projectId])
  @@index([projectId], map: "fk_projectOwner_projects1_idx")
}

model project_status {
  project_status_Id     Int                     @id @default(autoincrement())
  status                String                  @db.VarChar(45)
  project_status_status project_status_status[]
}

model project_status_status {
  project_Id        Int
  project_status_Id Int
  project_status    project_status @relation(fields: [project_status_Id], references: [project_status_Id], onDelete: NoAction, onUpdate: NoAction, map: "fk_project_status_status_project_status1")
  projects          projects       @relation(fields: [project_Id], references: [project_Id], onDelete: NoAction, onUpdate: NoAction, map: "fk_project_status_status_projects1")

  @@id([project_Id, project_status_Id])
  @@index([project_status_Id], map: "fk_project_status_status_project_status1_idx")
}

model project_tools {
  project_Id Int
  tool_Id    Int
  projects   projects @relation(fields: [project_Id], references: [project_Id], onDelete: NoAction, map: "fk_projectTools_projects1")
  tools      tools    @relation(fields: [tool_Id], references: [tool_Id], onDelete: NoAction, onUpdate: NoAction, map: "fk_project_tools_tools1")

  @@id([project_Id, tool_Id])
  @@index([project_Id], map: "fk_projectTools_projects1_idx")
  @@index([tool_Id], map: "fk_project_tools_tools1_idx")
}

model projects {
  project_Id            Int                     @id
  user_Id               Int
  category_Id           Int
  title                 String                  @db.VarChar(45)
  description           String?                 @db.VarChar(45)
  start_date            DateTime                @db.DateTime(0)
  end_date              DateTime                @db.DateTime(0)
  budget                Decimal                 @db.Decimal(5, 2)
  thumbnail             String?                 @db.VarChar(255)
  challenges            challenges[]
  project_owner         project_owner[]
  project_status_status project_status_status[]
  project_tools         project_tools[]
  users                 users                   @relation(fields: [user_Id], references: [user_Id], onDelete: NoAction, map: "fk_projects_admins")
  product_category      product_categories      @relation(fields: [category_Id], references: [category_Id], onDelete: NoAction, map: "fk_projects_category1")
  todos                 todos[]

  @@index([user_Id], map: "fk_projects_admins_idx")
  @@index([category_Id], map: "fk_projects_category1_idx")
}

model roles {
  role_Id    Int          @id @default(autoincrement())
  role_name  String       @unique(map: "role_name_UNIQUE") @db.VarChar(45)
  user_roles user_roles[]
}

model solutions {
  solution_Id  Int        @default(autoincrement())
  challenge_Id Int
  title        String     @db.VarChar(255)
  challenges   challenges @relation(fields: [challenge_Id], references: [challenge_Id], onDelete: NoAction, map: "fk_challenges_copy1_challenges1")

  @@id([solution_Id, challenge_Id])
  @@index([challenge_Id], map: "fk_challenges_copy1_challenges1_idx")
}

model testimonials {
  testimonial_Id Int      @id @default(autoincrement())
  user_Id        Int
  rating         Int
  review         String?  @db.VarChar(255)
  date           DateTime @db.DateTime(0)
  users          users    @relation(fields: [user_Id], references: [user_Id], onDelete: NoAction, map: "fk_roles_users100")

  @@index([user_Id], map: "fk_roles_users1_idx")
}

model todos {
  todo_Id    Int      @default(autoincrement())
  project_Id Int
  titile     String   @db.VarChar(255)
  status     String   @db.VarChar(45)
  projects   projects @relation(fields: [project_Id], references: [project_Id], onDelete: NoAction, onUpdate: NoAction, map: "fk_todos_projects1")

  @@id([todo_Id, project_Id])
  @@index([project_Id], map: "fk_todos_projects1_idx")
}

model tools {
  tool_Id       Int             @id @default(autoincrement())
  name          String          @db.VarChar(45)
  project_tools project_tools[]
}

model user_roles {
  role_Id Int
  user_Id Int
  roles   roles @relation(fields: [role_Id], references: [role_Id], onDelete: NoAction, map: "fk_user_roles1")
  users   users @relation(fields: [user_Id], references: [user_Id], onDelete: NoAction, map: "fk_user_roles_users1")

  @@id([role_Id, user_Id])
  @@index([user_Id], map: "fk_user_roles_users1_idx")
}

model users {
  user_Id             Int                 @id @default(autoincrement())
  first_name          String              @db.VarChar(45)
  last_name           String              @db.VarChar(45)
  email               String              @unique(map: "email_UNIQUE") @db.VarChar(255)
  password            String              @db.VarChar(45)
  bio                 String?             @db.VarChar(255)
  profile_picture_url String?             @db.VarChar(255)
  course_enrollment   course_enrollment[]
  courses             courses[]
  customer_details    customer_details[]
  orders              orders[]
  project_owner       project_owner[]
  projects            projects[]
  testimonials        testimonials[]
  user_roles          user_roles[]
}

model product_categories {
  category_Id   Int        @id @default(autoincrement())
  category_name String     @db.VarChar(45)
  products      products[]
  projects      projects[]
}

model coupons {
  coupon_Id       Int             @id @default(autoincrement())
  coupon_code     String          @db.VarChar(45)
  discount_amount Decimal         @db.Decimal(5, 2)
  created_date    DateTime        @db.DateTime(0)
  expiration_date DateTime        @db.DateTime(0)
  usage_limit     Int
  order_coupons   order_coupons[]
}
